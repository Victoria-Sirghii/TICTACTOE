{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","components/StatusMessage.js","App.js","helpers.js","index.js"],"names":["Square","value","onClick","isWinningSquare","className","type","Board","board","handleSquareClcik","winningSquare","renderSquare","position","includes","History","history","moveTo","currentMove","map","_","move","StatusMessage","winner","current","noMoveLeft","every","el","isXNext","NEW_GAME","Array","fill","App","useState","setHistory","setCurrentMove","squares","lines","i","length","a","b","c","calculateWinner","prev","last","newBoard","square","pos","concat","style","fontWeight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70779330.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Square = ({ value, onClick, isWinningSquare }) => {\r\n    return (  \r\n        <button \r\n            className={`square ${isWinningSquare ? 'winning' : \"\"}\r\n                ${value === 'X' ? 'text-green' : 'text-orange'}`}\r\n            type=\"button\"\r\n            onClick={onClick}>\r\n            {value}\r\n        </button>)\r\n\r\n}\r\n\r\nexport default Square\r\n","import React from 'react';\r\nimport Square from './Square'\r\n\r\nconst Board = ({ board, handleSquareClcik, winningSquare}) => {\r\n    const renderSquare = position => {\r\n        const isWinningSquare = winningSquare.includes(position)\r\n\r\n        return (\r\n            <Square value={board[position]}\r\n            onClick={() => handleSquareClcik(position)}\r\n            isWinningSquare={isWinningSquare} />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"board\">\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\r\n\r\nconst History = ({ history, moveTo, currentMove }) => {\r\n    return (\r\n    <div className=\"history-wrapper\">\r\n        <ul className=\"history\">\r\n            {history.map((_, move) => {\r\n                return (\r\n                    <li key={move}>\r\n                        <button \r\n                            type=\"button\" \r\n                            className={` btn-move ${move === currentMove ? 'active' : ''}`}\r\n                            onClick={() => {\r\n                                moveTo(move)\r\n                            }}>\r\n                            {move === 0 ? 'Go to game start' : `Go to move #${move}`}\r\n                        </button>\r\n                    </li>\r\n                )\r\n                }) \r\n            }\r\n        </ul>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default History\r\n","import { within } from '@testing-library/dom'\r\nimport React from 'react'\r\n\r\nconst StatusMessage = ({ winner, current }) => {\r\n  // const message = winner \r\n  // ? `Winner is ${winner}`\r\n  // : `Next player is ${current.isXNext ? 'X' : 'O'}`;\r\n  const noMoveLeft = current.board.every(el => el !== null)\r\n  return (\r\n    <div className=\"status-message\">\r\n      {winner && (\r\n      <>\r\n        Winner is {''}\r\n        <span className={winner === 'X' ? 'text-green' : 'text-orange'}>\r\n          {winner}\r\n        </span>\r\n      </>\r\n      )}\r\n      {!winner && !noMoveLeft && (\r\n      <>\r\n        Next player is {''}\r\n        <span className={current.isXNext ? 'text-green' : 'text-orange'}>\r\n          {current.isXNext ? 'X' : 'O'}\r\n        </span>\r\n      </>\r\n      )}\r\n      {!winner && noMoveLeft && <>\r\n      <span className=\"text-green\">X</span> and <span className=\"text-orange\">O</span> tied\r\n      </>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StatusMessage\r\n","import React,{ useState} from 'react';\nimport Board from './components/Board';\nimport History from './components/History';\nimport StatusMessage from './components/StatusMessage';\nimport { calculateWinner } from './helpers';\n\nimport './styles/root.scss';\n\nconst NEW_GAME = [\n  { board: Array(9).fill(null), isXNext : true }\n]\n\nfunction App() {\n  const [ history, setHistory ] = useState(NEW_GAME);\n  const [ currentMove, setCurrentMove  ] = useState(0);\n  const current = history[currentMove];\n\n  const {winner, winningSquare} = calculateWinner(current.board);\n\n  const handleSquareClcik = position => {\n      if(current.board[position] || winner){\n          return;\n      }\n\n      setHistory(prev => {\n        const last = prev[prev.length - 1];\n\n        const newBoard =  last.board.map((square, pos) => {\n              if(pos === position) {\n                  return last.isXNext ? 'X' : 'O';\n              }\n              return square;\n          });\n          return prev.concat({ board: newBoard, isXNext: !last.isXNext})\n      });\n      setCurrentMove(prev => prev + 1)\n  };\n  const moveTo = move => {\n    setCurrentMove(move);\n  };\n\n  const onNewGame = () =>{\n    setHistory(NEW_GAME)\n    setCurrentMove(0)\n  }\n  return (\n    <div className=\"app\">\n      <h1>TIC <span className=\"text-green\">TAC</span> TOE</h1>\n      <StatusMessage winner={winner} current={current}/>\n      <Board \n        board={current.board} \n        handleSquareClcik={handleSquareClcik}\n        winningSquare={winningSquare}/>\n      <button \n        type=\"button\" \n        onClick={onNewGame} \n        className={`btn-reset ${winner ? 'active' : ''}`}>\n          Start new game\n      </button>\n      <h2 style={{fontWeight: 'normal'}}>Current game history</h2>\n      <History history={history} moveTo={moveTo} currentMove={currentMove}/>\n      <div className=\"bg-balls\"/>\n    </div>\n  );\n}\n\nexport default App;\n","export function calculateWinner(squares){\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ]\r\n    for ( let i = 0; i < lines.length; i++){\r\n        const [a,b,c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            // return squares[a];\r\n            return{\r\n                winner: squares[a],\r\n                winningSquare: [a, b, c]\r\n            }\r\n        }\r\n    }\r\n    return{\r\n        winner: null,\r\n        winningSquare: []\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n\n"],"sourceRoot":""}